import groovy.json.JsonOutput
import net.minecraftforge.gradle.common.task.SignJar

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

version = buildVersionString()
group = 'blusunrize.immersiveengineering' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ImmersiveEngineering'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    "$rootDir/src/generated/resources"
            ]
        }
    }
}

def version_replaces = [
        'version': project.version,
        'mc_version': version_minecraft,
        'forge_version': version_forge
]

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand version_replaces
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200515-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            property 'fml.earlyprogresswindow', 'false'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            // Necessary for VisualVM
            property 'com.sun.management.jmxremote', 'true'
            property 'com.sun.management.jmxremote.port', '9010'
            property 'com.sun.management.jmxremote.local.only', 'false'
            property 'com.sun.management.jmxremote.authenticate', 'false'
            property 'com.sun.management.jmxremote.ssl', 'false'
            mods {
                immersiveengineering {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Disable GUI by default, the IDE console can be used to enter commands
            args '-nogui'

            mods {
                immersiveengineering {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            args '--mod', 'immersiveengineering', '--all', '--output', file('src/generated/resources/'), '--validate',
                    '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                immersiveengineering {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // BlockModelSplitter
        name 'Jared maven'
        url 'https://maven.blamejared.com/'
    }
    repositories {//Curseforge maven, in case some other maven goes offline and for mods that don't have a maven
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:1.15.2-${version_forge}"
    runtimeOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.4")
    runtimeOnly fg.deobf("nbtedit:NBTEdit:0.9.0")
    compileOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.4:api")
    compile "malte0811:BlockModelSplitter:1.2.0"
    testImplementation('junit:junit:4.13')
}

def customGradle = rootProject.file('custom.gradle');
if (customGradle.exists()) {
    apply from: customGradle;
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    if (project.hasProperty('keyStore')) {
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = project.storePass
        keyPass = project.storePass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    } else {
        logger.warn("No key store found, not signing the output jar\n")
    }
}

build.dependsOn signJar

String buildVersionString() {
    String ie_output_version = "${version_ie}-${version_buildnumber}"
    boolean jenkins_build = System.getenv("ie_add_git_rev") != null
    if (jenkins_build) {
        File changelog = new File("changelog.md")
        if (!changelog.exists()) {
            // Get the current minor/patch number and bump it
            int idx = version_ie.lastIndexOf(".")
            String major = version_ie.substring(0, idx)
            String minor = version_ie.substring(idx + 1)
            int bumped = minor.toInteger() + 1
            ie_output_version = "${major}.${bumped}-pre"
        } else {
            // If the changelog file is present, we use the first line from that
            String first_line = changelog.readLines().get(0)
            ie_output_version = first_line.substring(first_line.indexOf("-") + 1)
        }
        // Now use describe to get the number of commits since the last tag
        exec {
            commandLine 'git', 'fetch', '-t'
        }
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--long', '--abbrev=8', 'HEAD'
            standardOutput = stdout
        }
        String descr = stdout.toString().trim()
        descr = descr.substring(0, descr.length() - 10)
        int idx = descr.lastIndexOf("-")
        int pre_version = descr.substring(idx + 1).toInteger()
        // If there have been more than 0 commits, consider this a pre-build
        // otherwise use normal versioning (so a Jenkins build on the tag is equal to a release)
        if (pre_version > 0)
            ie_output_version = "${ie_output_version}.${pre_version}"
    }
    return "${version_minecraft}-${ie_output_version}"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
    archives shadowJar
}

shadowJar {
    classifier = ''
    dependencies {
        include(dependency('malte0811:BlockModelSplitter:.*'))
    }
}

reobf {
    shadowJar {}
}

apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description project.archivesBaseName
                    url ''
                    scm {
                        url 'https://github.com/BluSunrize/ImmersiveEngineering'
                        connection 'scm:git:git@github.com/BluSunrize/ImmersiveEngineering.git'
                        developerConnection 'scm:git:git@github.com/BluSunrize/ImmersiveEngineering.git'
                    }
                    issueManagement {
                        system 'github'
                        url 'https://github.com/BluSunrize/ImmersiveEngineering/issues'
                    }

                    developers {
                        developer {
                            id 'BluSunrize'
                            name 'BluSunrize'
                            roles { role 'developer' }
                        }
                    }
                }
            }
        }
    }
}
uploadArchives.dependsOn build

//Code for automatic update JSON generation
class GenerateUpdateJSON extends DefaultTask {
    static def initVersions = { mcFromIEVersion ->
        mcFromIEVersion.put("0.8", "1.8.9")
        mcFromIEVersion.put("0.9", "1.9.4")
        mcFromIEVersion.put("0.10", "1.10.2")
        mcFromIEVersion.put("0.11", "1.11.2")
        mcFromIEVersion.put("0.12", "1.12.2")
        mcFromIEVersion.put("0.14", "1.14.4")
        mcFromIEVersion.put("0.15", "1.15.2")
    }
    static def VERSION_PREFIX = "##### Version "
    static def CURRENT_MC_VERSION = "1.15.2"
    static def CHANGELOG_FOR_MANUAL = "src/main/resources/assets/immersiveengineering/changelog.json"
    static def BUILT_SUFFIX = " - BUILT"
    static def PRE_SUFFIX = "-pre"
    static def RECOMMENDED = "-recommended"
    static def LATEST = "-latest"
    static def CF_URL = "https://minecraft.curseforge.com/projects/immersive-engineering"

    static int compareVersions(String vA, String vB) {
        String[] vPartsA = vA.split("[\\D]")
        String[] vPartsB = vB.split("[\\D]")
        if (vPartsA.length == 0 && vPartsB.length == 0)
            return vA <=> vB
        else if (vPartsA.length == 0)
            return -1
        else if (vPartsB.length == 0)
            return 1

        int length = Math.min(vPartsA.length, vPartsB.length)
        for (int i = 0; i < length; i++) {
            int pA = Integer.parseInt(vPartsA[i])
            int pB = Integer.parseInt(vPartsB[i])
            if (pA != pB) {
                return pA <=> pB
            }
        }
        if (vPartsA.length != vPartsB.length)
            return vPartsA.length <=> vPartsB.length
        return vA <=> vB
    }

    @TaskAction
    def generate() {
        Map<String, String> mcFromIEVersion = new HashMap<>()
        initVersions(mcFromIEVersion)
        File changelog = new File("changelog.md")
        if (!changelog.exists())
            println "Changelog does not exist! Aborting!"
        else {
            Map<String, Map<String, String>> changelogForVersions = new HashMap<>()
            Map<String, String> promos = new TreeMap<>({ String s1, String s2 ->
                compareVersions(s1, s2)
            })
            String currentVersion = null
            String currentChangelog = ""
            changelog.eachLine('ISO-8859-1', { line ->
                if (line.startsWith(VERSION_PREFIX)) {
                    if (currentVersion != null) {
                        String mainVer = currentVersion.substring(0, currentVersion.indexOf('-'))
                        String mcVer;
                        // legacy versioning support
                        if (mainVer.startsWith("0.")) {
                            mcVer = mcFromIEVersion[mainVer]
                        } else {
                            mcVer = mainVer
                        }
                        if (mcVer == null) {
                            throw new NullPointerException("Could not find MC version for " + currentVersion);
                        }
                        if (!changelogForVersions.containsKey(mcVer)) {
                            promos.put(mcVer + RECOMMENDED, currentVersion)
                            promos.put(mcVer + LATEST, currentVersion)
                            changelogForVersions[mcVer] = new TreeMap<>({ String s1, String s2 ->
                                compareVersions(s1, s2)
                            })
                        }
                        changelogForVersions[mcVer][currentVersion] = currentChangelog
                    }
                    if (line.endsWith(BUILT_SUFFIX)) {
                        currentVersion = line.substring(VERSION_PREFIX.length(), line.length() - BUILT_SUFFIX.length())
                    } else if (!line.endsWith(PRE_SUFFIX)) {
                        currentVersion = line.substring(VERSION_PREFIX.length())
                    } else {
                        currentVersion = (String) null
                    }
                    currentChangelog = ""
                } else if (!line.isEmpty()) {
                    if (currentChangelog.length() == 0)
                        currentChangelog += line
                    else
                        currentChangelog += "\n" + line
                }
                return null
            })
            Map<String, Object> mainMap = new TreeMap<>({ String s1, String s2 ->
                compareVersions(s1, s2)
            })
            mainMap.putAll(changelogForVersions)
            mainMap["homepage"] = CF_URL
            mainMap["promos"] = promos
            //JSON for the Forge update checker
            def updateJson = JsonOutput.toJson(mainMap)
            updateJson = JsonOutput.prettyPrint(updateJson)
            File outF = new File("changelog.json")
            outF.delete()
            outF << updateJson

            //JSON for the manual
            def mapForCurrent = changelogForVersions.getOrDefault(CURRENT_MC_VERSION, new HashMap<>())
            def manualJson = JsonOutput.toJson(mapForCurrent)
            manualJson = JsonOutput.prettyPrint(manualJson)
            outF = new File(CHANGELOG_FOR_MANUAL)
            outF.delete()
            outF << manualJson
        }
    }
}

task updateJson(type: GenerateUpdateJSON)

processResources.dependsOn updateJson
