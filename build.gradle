import groovy.json.JsonOutput

def mainVersion = "0.12"
def buildNumber = "86"

// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "${mainVersion}-${buildNumber}" + getBuildNumber()
group = "blusunrize"
def archiveGroup = group
archivesBaseName = "ImmersiveEngineering"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"

    replace '${version}', project.version
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_39"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // HWYLA
        name "TehNuts WAILA fork"
        url "http://tehnut.info/maven"
    }
    maven { // OpenComputers
        name "OpenComputers"
        url "http://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
//    maven { // McJty's CompatLayer
//        name 'K4 maven'
//        url "http://maven.k-4u.nl/"
//    }
    maven { // CraftTweaker (aka MineTweaker3)
        name 'jared maven'
        url "http://maven.blamejared.com/"
    }
    maven { // ModMaven, there is a bunch of stuff on there
        name 'ModMaven'
        url "http://modmaven.k-4u.nl/"
    }
    repositories {//Curseforge maven, in case some other maven goes offline
        maven {
            name = "CurseForge"
            url = "https://minecraft.curseforge.com/api/maven/"
        }
    }
    /*maven { //IC2
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }*/
    maven { // Redstone Flux
        name 'CoFH Maven'
        url "http://maven.covers1624.net/"
    }
    maven { // Albedo Lights
        url 'https://repo.elytradev.com/'
    }
}

dependencies {
    compileOnly "team.chisel.ctm:CTM:MC1.12-0.2.1.5"
    compileOnly "mezz.jei:jei_1.12.2:4.10.+"
    compileOnly "cofh:RedstoneFlux:1.12-2.+:deobf"
    compileOnly "slimeknights.mantle:Mantle:1.12-1.3.+"
    compileOnly "slimeknights:TConstruct:1.12.2-2.10.+"
    compileOnly "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.+"//1.1x-1.4.4-55
    compileOnly "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.8.468"
    compileOnly "opencomputers:OpenComputers:MC1.12.2:1.7.2.67"//li.cil.oc:OpenComputers:MC1.12.1-1.7.0.+"
    compileOnly "mcp.mobius.waila:Hwyla:1.8.20-B35_1.12"
    compileOnly 'industrial-craft:industrialcraft-2:release:ex112'//'net.industrial-craft:industrialcraft-2:2.8.+'
//    compileOnly "actually-additions:ActuallyAdditions:1.12.2:r137" -Leaving this for when r137 releases
    compileOnly "actually-additions:ActuallyAdditions-1.12.2:r136:hotfix8"
    compileOnly 'baubles:Baubles:1.12:1.5.2'
    deobfCompile 'elucent:albedo:2.0-SNAPSHOT'
}

reobf {
    coreJar { mappingType = 'SEARGE' }
}

task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Don't include the coremod in the main mod
        // If you have more coremod-related packages that aren't nested in the main one, add exclusions for them
        include 'blusunrize/immersiveengineering/common/asm/**'
    }
    manifest {
        attributes "FMLCorePlugin": "blusunrize.immersiveengineering.common.asm.IELoadingPlugin"
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + '-core:' + version
    }
    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

task signCoreJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfCoreJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = project.storePass
        keyPass = project.storePass
        inputFile = coreJar.archivePath
        outputFile = coreJar.archivePath
    }
}

task signMainJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.storeAlias
        storePass = project.storePass
        keyPass = project.storePass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}
build.dependsOn signMainJar
jar.dependsOn signCoreJar
def libPrefix = 'META-INF/libraries'
jar {
    manifest {
        attributes 'ContainedDeps': libPrefix + '/' + coreJar.archivePath.name
        attributes "FMLAT": "ImmersiveEngineering_at.cfg"
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + ':' + version
    }
    exclude 'blusunrize/immersiveengineering/common/asm/**'
    // Add the output of the mod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into libPrefix
    }
}

sourceSets {
    main {
        java {
//            exclude 'blusunrize/immersiveengineering/common/util/compat/opencomputers/**'
//            exclude 'blusunrize/immersiveengineering/common/util/compat/waila/**'
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": "1.12"
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': 'ImmersiveEngineering_at.cfg'
        attributes 'Maven-Artifact': group + ':' + archivesBaseName + ':' + version
    }
}

task apiZip(type: Zip) {
    from(sourceSets.main.java) {
        include "blusunrize/immersiveengineering/api/**"
    }
    classifier = 'api'
}
task apiJar(type: Jar) {
    from(sourceSets.main.java) {
        include "blusunrize/immersiveengineering/api/**"
    }
    classifier = 'api'
}

artifacts {
    archives deobfJar
    archives apiZip
    archives apiJar
}

apply plugin: 'maven'
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
                project {
                    name project.archivesBaseName
                    packaging 'jar'
                    description project.archivesBaseName
                    url ''
                    scm {
                        url 'https://github.com/BluSunrize/ImmersiveEngineering'
                        connection 'scm:git:git@github.com/BluSunrize/ImmersiveEngineering.git'
                        developerConnection 'scm:git:git@github.com/BluSunrize/ImmersiveEngineering.git'
                    }
                    issueManagement {
                        system 'github'
                        url 'https://github.com/BluSunrize/ImmersiveEngineering/issues'
                    }

                    developers {
                        developer {
                            id 'BluSunrize'
                            name 'BluSunrize'
                            roles { role 'developer' }
                        }
                    }
                }
            }
        }
    }
}

String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if (buildNumber.equals("")) {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? "." + System.getenv("bamboo_buildNumber") : ""
    }
    if (!buildNumber.equals("")) {
        buildNumber = "-" + buildNumber
    }
    return buildNumber
}

//Code for automatic update JSON generation
class GenerateUpdateJSON extends DefaultTask {
    static def initVersions = { mcFromIEVersion ->
        mcFromIEVersion.put("0.8", "1.8.9")
        mcFromIEVersion.put("0.9", "1.9.4")
        mcFromIEVersion.put("0.10", "1.10.2")
        mcFromIEVersion.put("0.11", "1.11.2")
        mcFromIEVersion.put("0.12", "1.12.2")
    }
    static def VERSION_PREFIX = "#####Version "
    static def CURRENT_MC_VERSION = "1.12.2"
    static def CHANGELOG_FOR_MANUAL = "src/main/resources/assets/immersiveengineering/changelog.json"
    static def BUILT_SUFFIX = " - BUILT"
    static def RECOMMENDED = "-recommended"
    static def LATEST = "-latest"
    static def CF_URL = "https://minecraft.curseforge.com/projects/immersive-engineering"

    static int compareVersions(String vA, String vB) {
        String[] vPartsA = vA.split("[\\D]")
        String[] vPartsB = vB.split("[\\D]")
        if (vPartsA.length == 0 && vPartsB.length == 0)
            return vA <=> vB
        else if (vPartsA.length == 0)
            return -1
        else if (vPartsB.length == 0)
            return 1

        int length = Math.min(vPartsA.length, vPartsB.length)
        for (int i = 0; i < length; i++) {
            int pA = Integer.parseInt(vPartsA[i])
            int pB = Integer.parseInt(vPartsB[i])
            if (pA != pB) {
                return pA <=> pB
            }
        }
        if (vPartsA.length != vPartsB.length)
            return vPartsA.length <=> vPartsB.length
        return vA <=> vB
    }

    @TaskAction
    def generate() {
        Map<String, String> mcFromIEVersion = new HashMap<>()
        initVersions(mcFromIEVersion)
        File changelog = new File("changelog.md")
        if (!changelog.exists())
            println "Changelog does not exist! Aborting!"
        else {
            Map<String, Map<String, String>> changelogForVersions = new HashMap<>()
            Map<String, String> promos = new TreeMap<>({ String s1, String s2 ->
                compareVersions(s1, s2)
            })
            String currentVersion = null
            String currentChangelog = ""
            changelog.eachLine('ISO-8859-1', { line ->
                if (line.startsWith(VERSION_PREFIX)) {
                    if (currentVersion != null) {
                        String mainVer = currentVersion.substring(0, currentVersion.indexOf('-'))
                        String mcVer = mcFromIEVersion[mainVer]
                        if (!changelogForVersions.containsKey(mcVer)) {
                            promos.put(mcVer + RECOMMENDED, currentVersion)
                            promos.put(mcVer + LATEST, currentVersion)
                            changelogForVersions[mcVer] = new TreeMap<>({ String s1, String s2 ->
                                compareVersions(s1, s2)
                            })
                        }
                        changelogForVersions[mcVer][currentVersion] = currentChangelog
                    }
                    if (line.endsWith(BUILT_SUFFIX)) {
                        currentVersion = line.substring(VERSION_PREFIX.length(), line.length() - BUILT_SUFFIX.length())
                    } else {
                        currentVersion = (String) null
                    }
                    currentChangelog = ""
                } else if (!line.isEmpty()) {
                    if (currentChangelog.length() == 0)
                        currentChangelog += line
                    else
                        currentChangelog += "\n" + line
                }
                return null
            })
            Map<String, Object> mainMap = new TreeMap<>({ String s1, String s2 ->
                compareVersions(s1, s2)
            })
            mainMap.putAll(changelogForVersions)
            mainMap["homepage"] = CF_URL
            mainMap["promos"] = promos
            //JSON for the Forge update checker
            def updateJson = JsonOutput.toJson(mainMap)
            updateJson = JsonOutput.prettyPrint(updateJson)
            File outF = new File("changelog.json")
            outF.delete()
            outF << updateJson
            //JSON for the manual
            def manualJson = JsonOutput.toJson(changelogForVersions[CURRENT_MC_VERSION])
            manualJson = JsonOutput.prettyPrint(manualJson)
            outF = new File(CHANGELOG_FOR_MANUAL)
            outF.delete()
            outF << manualJson
        }
    }
}

task updateJson(type: GenerateUpdateJSON)

processResources.dependsOn updateJson
